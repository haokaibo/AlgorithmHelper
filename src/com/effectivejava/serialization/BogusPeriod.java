/**
 * 
 */
package com.effectivejava.serialization;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * @author Kaibo Hao
 *
 */
public class BogusPeriod {
	// Byte stream could not have come from real Period instance!
	private static final byte[] serializedForm = new byte[] { (byte) 0xac,
			(byte) 0xed, 0x0, 0x5, 0x73, 0x72, 0x0, 0x26, 0x63, 0x6f, 0x6d,
			0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6a,
			0x61, 0x76, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
			0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69,
			0x6f, 0x64, (byte) 0xb4, (byte) 0xcb, (byte) 0xeb, (byte) 0xdf,
			0x7, 0x64, 0x6a, (byte) 0xd1, 0x2, 0x0, 0x2, 0x4c, 0x0, 0x3, 0x65,
			0x6e, 0x64, 0x74, 0x0, 0x10, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f,
			0x75, 0x74, 0x69, 0x6c, 0x2f, 0x44, 0x61, 0x74, 0x65, 0x3b, 0x4c,
			0x0, 0x5, 0x73, 0x74, 0x61, 0x72, 0x74, 0x71, 0x0, 0x7e, 0x0, 0x1,
			0x78, 0x70, 0x73, 0x72, 0x0, 0xe, 0x6a, 0x61, 0x76, 0x61, 0x2e,
			0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x68, 0x6a,
			(byte) 0x81, 0x1, 0x4b, 0x59, 0x74, 0x19, 0x3, 0x0, 0x0, 0x78,
			0x70, 0x77, 0x8, 0x0, 0x0, 0x0, 0x66, (byte) 0xdf, 0x6e, 0x1e, 0x0,
			0x78, 0x73, 0x71, 0x0, 0x7e, 0x0, 0x3, 0x77, 0x8, 0x0, 0x0, 0x0,
			(byte) 0xd5, 0x17, 0x69, 0x22, 0x0, 0x78, };

	public static void main(String[] args) {
		Period p = (Period) deserialize(serializedForm);
		System.out.println(p);
	}

	// Returns the object with the specified serialized form
	private static Object deserialize(byte[] sf) {
		try {
			InputStream is = new ByteArrayInputStream(sf);
			ObjectInputStream ois = new ObjectInputStream(is);
			return ois.readObject();
		} catch (Exception e) {
			throw new IllegalArgumentException(e);
		}
	}

	// Writes the object to the byte Array.
	private static byte[] serialize(Object obj) {
		try {
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			ObjectOutputStream oos = new ObjectOutputStream(os);
			oos.writeObject(obj);
			oos.close();
			return os.toByteArray();
		} catch (Exception e) {
			throw new IllegalArgumentException(e);
		}
	}
}